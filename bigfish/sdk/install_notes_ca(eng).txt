Usage sepecification of SDK environment Conax CA:

Item 1.pereparation for compiling SDK

1.Server environment for compiling must follow below setting before compile SDK.
   1)Use root account in shell command, set suid for the command of "chmod" and "chown", please refer to below command:
      chmod +s /bin/chmod
      chmod +s /bin/chown

      Please use the command "ls -l /bin/ch*" to check whether the suid is set for both comands.

   2)Install msgfmt software(GNU gettext-tools):
      For ubuntu OS, please install it automatically with:apt-get install gettext
      For redhat OS, please first download gettext package, then execute: rpm -ivh xxx.rpm.
            
      Please use command£ºmsgfmt -V to check whether this software is installed successfully.


2.Introduce to configure SDK for Advanced CA
  Advanced CA has 3 option:
  1) CFG_HI_ADVCA_SUPPORT=y
     Denote SDK can support advcaced CA chipset.
  2)CFG_HI_ADVCA_TYPE=XXX 
    XXX indecate now/will support CA Vendor, Such as:CONAX, NOVEL, SUMA, NAGRA, OTHER(OHTER should use for other CAVendor)
  3)CFG_HI_ADVCA_FUNCTION=YYY
    Default setting is to close CFG_HI_ADVCA_FUNCTION.
    This option change some feature in SDK accroding to CA Vendor requirement.
    Some feacture in SDK may not be used if this option is opened.
    Please first know how to use it, before use this option.
    There are 3 sub-option:
      CFG_HI_ADVCA_FUNCTION=DEBUG
      Open this option, and compile SDK£º
         Boot has not selboot function, You can not download boot with HiTool.
         Boot permit to output debug message from UART(RS232) and provide limited test command.
         kernel and FS remove serval feature.
      CFG_HI_ADVCA_FUNCTION=RELEASE
      Open this option, and compile SDK£º
         Boot has not selboot function, You can not download boot with HiTool.
         Boot forbid to output debug message from UART(RS232).
         kernel and FS remove most unuse feature.
      CFG_HI_ADVCA_FUNCTION=FINAL
      Open this option, and compile SDK£º
         Boot has not selboot function, You can not download boot with HiTool.
         Boot forbid to output debug message from UART(RS232).
         kernel and FS remove all not-neccessary feature.
         
   Note:The boot will include selfboot function,if SDK compile without define CFG_HI_ADVCA_FUNCTION. 

3. Try to configure SDK for Advanced CA
   Please use normal cofig file(such as hi3716cdmo2b_hi3716cv200_cfg.mak),
   come to $SDK, execute: make menuconfig, follow below step:
   
   1)Open Advcance CA Support
     Enter Component  ---> Select[*] Advance CA Support  
          --->  Select relative CA Vendor, such as: Advance CA Type (Conax)  --->Save.
      Caution: Option "[ ]   Advance CA Function"should be config after contact hisilicon and know its meaning.

   2)Select Kernel config file
   (Default setting should refer to hi3716cv200-common-ca_defconfig, Customer can option to select the file).
     Enter Kernel  ---> (hi3716cv200-XXXX_defconfig) Kernel Config File,Select relative config fie, Such as:
           hi3716cv200-common-ca_defconfig  //Basic advcanceCA kernel config
           hi3716cv200-ca-debug_defconfig   //AdvcanceCA kernel config which remove serval feature
           hi3716cv200-ca-release_defconfig //AdvcanceCA kernel config which remove most useless feature
           hi3716cv200-ca-final_defconfig   //AdvcanceCA kernel config which can be referenced by customer.

     If customer need manually config kernel, please enter SDK's kernel DIR, run:
         make ARCH=arm cross_compile=arm-hisiv200- menuconfig
     configure below setting:
      System Type --->  S40 board feature  ---> [ ] Support CA  ---> Select
        [*]   Support CA runtime check 
        [*]   Support CA wakeup ddr check
        [ ]   Support advca 
     Result:
       CONFIG_SUPPORT_CA=y       //Kernel support CA. This option must be set. If not, The power Standby/Resume would be effected.
       CONFIG_CA_RUNTIME_CHECK=y //Kernel support Runtime-Checking. This option must be set. If not, The power Standby/Resume would be effected.
       CONFIG_CA_WARKUP_CHECK=y  //Kernel support WAKEUP-CHECK. This option must be set. If not, The power Standby/Resume would be effected.

      Note:Kernel config file is loacted in:$(SDK)/source/kernel/linux-x.x.x.hica/system_configs/arch/arm/configs/.
      
   3)Select busybox config file
   (Default setting can use on Advcance CA Chipset, Customer can option to select the file).
     Enter Rootfs  ---> Busybox Config  ---> (xxxx_ca_root_xxxx.config)Busybox Config File For Root 
     If you have seleect CFG_HI_ADVCA_FUNCTION & (!CFG_HI_LOADER_APPLOADER), you can config
     (xxxx_ca_user_xxxx.config)Busybox Config File For User
     Select relative config fie, Such as:
          glibc_root_debug.config    //root counter, remove serval useless feature in busybox config
          glibc_ca_root_release.config  //root counter, remove most useless feature in busybox config
          glibc_ca_root_final.config    //root counter, customer can refer to this busybox config
          glibc_ca_user.config          //no-root counter, provide reference config.
          
      Note:Busybox config file is located in:$(SDK)/Code/source/rootfs/busybox/gcc4.4/busybox-1.16.1.config/.

   4)Disable VOIP function. Enter Component, cancel select[ ] VOIP Support.
   
   Save the setting, and compile SDK again.

   Please execute 'make menuconfig' at root directory of SDK based at the normal config file(such as arm-hisiv200-linux_ca_loader_debug.config),
   and then config as following:

   1) Open Advanced CA Feature support. Enter Component  --> select [*] Advance CA Support --> select CA type(such as suma), save.
      Notes: Please do not select  '[ ]   Advance CA Function' if the CA type is domestic(China) CA.

   2) Config kernel. Enter Kernel  ---> (hi3716cv200-common-ca_defconfig) Kernel Config File,select hi3716cv200-common-ca_defconfig.
      Notes: Please refer to the Kernel configure file directory: $(SDK)/source/kernel/linux-x.x.x.hica/system_configs/arch/arm/configs/.

   3) Config busybox. Enter Rootfs  ---> Busybox Config  ---> (xxxx_ca_root_xxxx.config)Busybox Config File For Root and
      (xxxx_ca_root_xxxx.config)Busybox Config File For User, select busybox configure file.
      Notes: Please refer to the busybox configure file directory: $(SDK)/Code/source/rootfs/busybox/gcc4.4/busybox-1.16.1.config/.

	After these steps, save and rebuild it.
 
4.Try to configure Advcance CA Loader
   Please use normal cofig file(such as, hi3716cdmo2b_hi3716cv200_apploader_cfg.mak),
   come to $SDK, execute: make menuconfig, follow below step:
   
   1) Open Advanced CA Feature support. Enter Component  --> select [*] Advance CA Support --> select CA type(such as suma), save.
      Notes: Please do not select  '[ ]   Advance CA Function' if the CA type is domestic(China) CA.

   2) Config kernel. Enter Kernel  ---> (hi3716cv200-common-ca_defconfig) Kernel Config File,select hi3716cv200-common-ca_defconfig.
      Notes: Please refer to the Kernel configure file directory: $(SDK)/source/kernel/linux-x.x.x/linux-x.x.x.hica/loader_configs/arch/arm/configs/.

   3) Config busybox. Enter Rootfs  ---> Busybox Config  ---> (xxxx_ca_loader_xxx.config)Busybox Config File For Root
      Select relative config fie, Such as:
          glibc_ca_loader_debug.config
          glibc_ca_loader_release.config
      Notes: Please refer to the busybox configure file directory: $(SDK)/Code/source/rootfs/busybox/gcc4.4/busybox-1.16.1.config/.
   
   4)Disable VOIP function. Enter Component, cancel select[ ] VOIP Support.

	After these steps, save and rebuild it.

5.Introduce the Boot of advaned:
   1) When burning Advanced CA image, the special self-boot programme is needed. Please execute 'make advca_programmer'in SDK£¬
   the programmer file would be created at pub/image/. 
   Pleaes sign this file using CASignTool before burning it.

   2)There are no print informations in advanced CA 'releae' and 'final' modes. But print inforamtions and restricted command lines exist in 'debug' mode.
   
   If a debug environment is needed in boot console,the full-function boot should be used. Please gernerate the full-fuction boot image as following steps:
   1) Execute 'make menuconfig'
   2) Enter Component ---> select '[*] Advance CA Support'  ---> select CA type(such as: Advance CA Type (Conax)). Important notes: Please do not select
       [ ]   Advance CA function. Save and exit.
   3) Rebuild the boot:
   		make hiboot_clean;make hiboot_install.
   	  The full-function boot image would be gernerated in pub/image, sign and burn it.

5.File System Type and bootargs parameters:

   1) The Squashfs file system and ramdisk device must be used in the Release system. You can certainly use Yaffs or other file system during the development.
      Note: You must carefully configre the mem size because the mem area may be occupied by file system in Release system. 

   2) The usage of memory like this:
      Total memory size = mem(involving mmz) + runtimecheck
      The size of runtimecheck area is 6M.

   3) The parameter of bootargs for yaffs file system:
     setenv bootcmd 'nand read 0x1000000 0x800000 0x400000;bootm 0x1000000';
     setenv bootargs 'mem=1018M console=ttyAMA0,115200 root=/dev/mtdblock4 rootfstype=yaffs2 mtdparts=hi_sfc:1M(boot),1M(bootargs);hinand:8M(loader),4M(kernel),80M(rootfs),1M(cadata),1M(loaderdb),1M(stbid),2M(db),1M(baseparam),1M(logo),1M(loaderdbbak),-(others) mmz=ddr,0,0,300M';

   4) The parameter of bootargs for squashfs file system:
       setenv bootcmd 'nand read 0x1000000 0x800000 0x400000; nand read 0x1400000 0xC00000 0x2800000; bootm 0x1000000'
      setenv bootargs 'mem=1018M console=ttyAMA0,115200 initrd=0x1400000,0x1800000 root=/dev/ram rootfstype=squashfs mtdparts=hi_sfc:1M(boot),1M(bootargs);hinand:8M(loader),4M(kernel),44M(rootfs),1M(cadata),1M(loaderdb),1M(stbid),2M(db),1M(baseparam),1M(logo),1M(loaderdbbak) mmz=ddr,0,0,300M';

     Note£º nand read 0x1400000 0xC00000 0x2800000  ----> read the data of file system to DDR
        initrd=0x1400000,0x1800000 root=/dev/ram rootfstype=squashfs  ----> indicate the loaction, length and type of file system. 

   5) The boot parameter for signature and encryption.
      setenv bootcmd 'verify system;bootm 1002000'
      setenv bootargs 'mem=1018M console=ttyAMA0,115200 initrd=0x1400000,0x1800000 root=/dev/ram rootfstype=squashfs mtdparts=hi_sfc:1M(boot),1M(bootargs);hinand:8M(loader),48M(system),1M(cadata),1M(loaderdb),1M(stbid),2M(db),1M(baseparam),1M(logo),1M(loaderdbbak) mmz=ddr,0,0,300M';

Item 2 Prepare for test sample 
    Take sample_dvbplay for example, explain how to make prepartion for test in release verion(not support NFS).

1. squashfs (CFG_ADVCA_FUNCTION=RELEASE)
   1). compile sample.
   2). copy sample_tsplay and ts stream onto SDK/platform/hi3110ev300ref1/rootbox/home/stb/bin
   3). add command to sf_prep in SDK/Makefile in order add execute ability to sample_tsplay:
         $(FILECAP) $(ROOTFSDIR)/home/stb/bin/sample_tsplay sys_rawio
   4). execute "make rootbox", then you can get rootbox.squashfs. and burn this rootbox.squashfs into flash.
   5). boot the STB-board, you can config bootargs use boot command.
 
 2. jffs(Only for debug)
   1). compile sample.
   2). copy sample_tsplay and ts stream onto SDK/platform/hi3110ev300ref1/rootbox/home/stb/bin
   3). execute "make rootbox", then you can get rootbox.jffs2. and burn this rootbox.jffs2 into flash.
   4). boot the STB-board, use "root" to log-in:
        username:root
        password:root
   5). execute mount -o remount,rw /, to change rootfs with rw privilege.
   6). execute below command before to run sample_tsplay.
        filecap /home/stb/bin/sample_tsplay sys_rawio

Item 3: STB Security Bootup
   Basic Security Bootup algrithm is RSA2048_Hash256. There are 3 tytes of image need to Verify the Signature.
   1. Security bootup on boot.
      Advcance chipset will automatically execute Security bootup process on boot when SCS flag is opened.
      This operation can not changed after SCS flag is opened.
   2. No-Boot image security authenitication.
      We provide serveral command to verify the signature of non-boot image, such as:
         "common_verify_image_signature"
         "common_verify_bootargs"
         "common_verify_signature_check"
      Please refer to "Advanced Secure CA Development Guide.pdf" and "CASignTool Application Notes.pdf" for more detail.
   3. Verify the signature of upgrade-image in Loader.
      We have provide interface to verify the signature of upgrade-image in Loader. please see:loader\api\src\ca_ssd.h

Item 4: Test sample
   1. Reboot STB-board.
      If log in with "root" account.
        username:root
        password:root
      If log in with "stb" account.
        username:stb
        password:stb
   2. Execute sample:
      cd /home/stb/bin
      ./sample_dvbplay 618
      
   3. Customer can execute sample in sandbox environment:
       chroot /home/stb
       sandbox /home/stb /bin/sample_dvbplay 618
          
   4. mount removable device onto system.
          
          Customer can directly mount removable device onto /mnt when SDK is compiled with CFG_ADVCA_FUNCTION=RELEASE.
          mount -o rw,nosuid,noexec,nodev -t vfat /dev/sda1 /mnt
          
          Customer must log in wiht "root" account to mount removable device onto /mnt when SDK is compiled with CFG_ADVCA_FUNCTION=DEBUG.
          method 1: mount removable device onto special user acount:
             mount -o uid=1000,gid=1000 -t vfat /dev/sda1 /mnt
          method 2: set the access privilege:
            mount -o umask=000 -t vfat /dev/sda1 /mnt
            or
            mount -o umask=022 -t vfat /dev/sda1 /mnt
            umask=000 means all acounts own rwx privilege;
            umask=022 means other acounts can have r-x privilege, no w privilege.

Item 5: Check chipset message:
      We use Hi3716CV200 as an example: 
      
      Do the command himd.l 0xF8AB0000 and himd.l 0xF8AB0100 in shell comand line.
      Or do the command md.l 0xF8AB0000 and md.l 0xF8AB0100 in boot command line of debug mode.
      You can check the following information.   
     
      fastboot# md.l 0xF8AB0000
      fastboot# md.l 0xF8AB0100  

      a) Address £º 0xF8AB0000 + 0x00E8
         Data £º 0x23c36eae
         comment £º NUID --- ChipID

      b) Address £º 0xF8AB0000 + 0x0120
         Data £º 0x0000347e
         comment £º MSID --- the code of market

      c) Address £º 0xF8AB0000 + 0x124
         Data £º 0x01020304
         comment £º VersionID

      d) Address £º 0xF8AB0000 + 0x012C
         Data £º 0x00000003
         comment £º ca_vendor_id ---- CA manufacture, 0--No advanced CA, 3--Conax
         
Item 6: Refence document
   "Advanced Secure CA Development Guide.pdf"
   "CASignTool Application Notes.pdf"

JPEG_CURDIR = $(shell pwd)

#===============================================================================
# export variable
#===============================================================================
ifeq ($(CFG_HI_EXPORT_FLAG),)
SDK_DIR ?= $(CURDIR)/../../../../..
include $(SDK_DIR)/base.mak
endif

#CFG_HI_ENC_CFLAGS = CONFIG_GFX_JPGE_ENC_ENABLE

#===============================================================================
# standard jpeg dir
#===============================================================================
SRC_9A   = ${JPEG_CURDIR}/src_9a
SRC_SIMD = ${JPEG_CURDIR}/src_simd
SRC_HARD = ${JPEG_CURDIR}/src_hard
SRC_HARD_ENC = ${JPEG_CURDIR}/src_hard_enc


TARGET := jpeg9a
DRV_TARGET := jpeg
#===============================================================================
# local variable
#===============================================================================
CFLAGS  +=  -I$(JPEG_CURDIR)                       \
	    -I${SRC_9A}                            \
            -I${SRC_SIMD}                          \
            -I${SRC_HARD}                          \
	    -I${SRC_HARD_ENC}                      \
            -I${JPEG_CURDIR}/../inc/inc_9a         \
            -I${JPEG_CURDIR}/../inc/inc_hard       \
            -I${JPEG_CURDIR}/../inc/inc_test       \
            -I${JPEG_CURDIR}/../grc_cmm_inc        \
            -I$(MSP_DIR)/api/tde/include           \
	    -I$(MSP_DIR)/api/jpge/include          \
            -I$(MSP_DIR)/drv/include/              \
            -I$(COMMON_UNF_INCLUDE)                \
            -I$(MSP_DIR)/drv/$(DRV_TARGET)/include

ifneq ($(findstring $(CFG_HI_ENC_CFLAGS), CONFIG_GFX_JPGE_ENC_ENABLE),)
CFLAGS += -I${MSP_DIR}/drv/include
endif

LIBPATH=-L$(COMMON_DIR)/api  \
        -L$(MSP_DIR)/api

CFLAGS  +=  $(CFG_HI_CFLAGS)
CFLAGS  +=  -DCFG_HI_JPEG6B_STREAMBUFFER_SIZE=$(CFG_HI_JPEG6B_STREAMBUFFER_SIZE)


#=====================================================================================
#the jpeg use version
#=====================================================================================
CFLAGS += -DCONFIG_HI_SDK_JPEG_VERSION
#CFLAGS += -DCONFIG_HI_FPGA_JPEG_VERSION

#=====================================================================================
#the platform version
#=====================================================================================
#CFLAGS += -DCONFIG_GFX_ANDROID_SDK
CFLAGS += -DCONFIG_GFX_STB_SDK
#CFLAGS += -DCONFIG_GFX_BVT_SDK
#CFLAGS += -DCONFIG_GFX_TV_SDK


ifdef CFG_HI_STATIC_LIB_ONLY
#directfb needed
CFLAGS += -fPIC
endif

#=====================================================================================
#use signal£¬not use mutex
#=====================================================================================
#CFLAGS += -DCONFIG_JPEG_USE_KERNEL_SIGNAL


#=====================================================================================
#the jpge enc var
#=====================================================================================
ifneq ($(findstring $(CFG_HI_SOFT_ENC_CFLAGS), CONFIG_GFX_JPGE_SOFT_ENC_ENABLE),)
CFLAGS += -D$(CFG_HI_SOFT_ENC_CFLAGS)
endif

ifneq ($(findstring $(CFG_HI_ENC_CFLAGS), CONFIG_GFX_JPGE_ENC_ENABLE),)
CFLAGS += -D$(CFG_HI_ENC_CFLAGS)
endif


#=====================================================================================
#ddr and stride is 256bytes align
#=====================================================================================
#CFLAGS += -DCONFIG_GFX_256BYTE_ALIGN

#=====================================================================================
#the chip env version
#=====================================================================================
LIBNAME=


#================================================================================
#this macro define in hi_gfx_comm.h
#================================================================================
#ifeq ($(findstring -DHI_ADVCA_FUNCTION_RELEASE, $(CFG_HI_CFLAGS)), -DHI_ADVCA_FUNCTION_RELEASE)
#CFLAGS += -DCONFIG_GFX_ADVCA_RELEASE
#endif


DEPEND_LIB = $(LIBPATH) $(LIBNAME)

#===============================================================================
# whether debug and add googlefunction
#===============================================================================
#CFLAGS += -DCONFIG_JPEG_DEBUG_INFO
#CFLAGS += -DCONFIG_JPEG_ADD_GOOGLEFUNCTION

#===============================================================================
# complie
#===============================================================================

CPPFLAGS = 
LDFLAGS  =

O = o

RM  = rm -f
AR  = ar rc
AR2 = ranlib


#===============================================================================
#compile encode lib src
#===============================================================================
LIB_ENC_SOURCES = ${SRC_9A}/jcapimin.c   ${SRC_9A}/jcapistd.c   ${SRC_9A}/jcarith.c  \
	          ${SRC_9A}/jccoefct.c   ${SRC_9A}/jccolor.c    ${SRC_9A}/jcdctmgr.c \
	          ${SRC_9A}/jchuff.c     ${SRC_9A}/jcinit.c     ${SRC_9A}/jcmainct.c \
		  ${SRC_9A}/jcmarker.c   ${SRC_9A}/jcmaster.c   ${SRC_9A}/jcparam.c  \
		  ${SRC_9A}/jcprepct.c   ${SRC_9A}/jcsample.c   ${SRC_9A}/jctrans.c  \
		  ${SRC_9A}/jfdctflt.c   ${SRC_9A}/jfdctfst.c   ${SRC_9A}/jfdctint.c

ifneq ($(findstring $(CFG_HI_ENC_CFLAGS), CONFIG_GFX_JPGE_ENC_ENABLE),)
LIB_ENC_SOURCES += ${SRC_HARD_ENC}/jpge_henc_api.c
endif

#===============================================================================
#compile decode lib src
#===============================================================================
LIB_DEC_SOURCES = ${SRC_9A}/jdapimin.c   ${SRC_9A}/jdapistd.c  ${SRC_9A}/jdarith.c  \
		  ${SRC_9A}/jdatadst.c   ${SRC_9A}/jdatasrc.c  ${SRC_9A}/jdcoefct.c \
		  ${SRC_9A}/jdcolor.c    ${SRC_9A}/jddctmgr.c  ${SRC_9A}/jdhuff.c   \
		  ${SRC_9A}/jdinput.c    ${SRC_9A}/jdmainct.c  ${SRC_9A}/jdmarker.c \
		  ${SRC_9A}/jdmaster.c   ${SRC_9A}/jdmerge.c   ${SRC_9A}/jdpostct.c \
		  ${SRC_9A}/jdsample.c   ${SRC_9A}/jdtrans.c   ${SRC_9A}/jidctflt.c \
		  ${SRC_9A}/jidctfst.c   ${SRC_9A}/jidctint.c  ${SRC_9A}/jquant1.c  \
	          ${SRC_9A}/jquant2.c    ${SRC_9A}/jdcolor_userbuf.c


LIB_DEC_SOURCES += ${SRC_9A}/transupp.c

LIB_DEC_SOURCES += ${SRC_HARD}/hi_jpeg_hdec_api.c  ${SRC_HARD}/jpeg_hdec_adp.c        \
                   ${SRC_HARD}/jpeg_hdec_api.c     ${SRC_HARD}/jpeg_hdec_mem.c        \
                   ${SRC_HARD}/jpeg_hdec_rwreg.c   ${SRC_HARD}/jpeg_hdec_setpara.c    \
                   ${SRC_HARD}/jpeg_hdec_suspend.c ${SRC_HARD}/jpeg_hdec_table.c      \
                   ${SRC_HARD}/jpeg_hdec_csc.c     ${SRC_HARD}/jpeg_hdec_sentstream.c \
                   ${SRC_HARD}/jpeg_hdec_signal.c  ${SRC_HARD}/hi_jpeg_hdec_test.c

#===============================================================================
#compile encode and decode lib src
#===============================================================================
LIB_COM_SOURCES = ${SRC_9A}/jaricom.c  ${SRC_9A}/jcomapi.c \
		  ${SRC_9A}/jerror.c   ${SRC_9A}/jutils.c  \
	          ${SRC_9A}/jmemmgr.c
#===============================================================================
#compile lib need mem src
#===============================================================================
LIB_SYSDEPMEMSRC = ${SRC_9A}/jmemnobs.c

#===============================================================================
#compile lib need simd src
#===============================================================================
#LIB_SIMD_SRC = ${SRC_SIMD}/jsimd_arm_neon.S    \
               ${SRC_SIMD}/jsimd_neon.c

#===============================================================================
#compile lib need all src
#===============================================================================
ifneq ($(findstring $(CFG_HI_SOFT_ENC_CFLAGS), CONFIG_GFX_JPGE_SOFT_ENC_ENABLE),)
SOURCES = $(LIB_DEC_SOURCES) $(LIB_COM_SOURCES) $(LIB_SYSDEPMEMSRC) $(LIB_SIMD_SRC)
else
SOURCES = $(LIB_ENC_SOURCES) $(LIB_DEC_SOURCES) $(LIB_COM_SOURCES) $(LIB_SYSDEPMEMSRC) $(LIB_SIMD_SRC)
endif



#===============================================================================
#compile lib need include
#===============================================================================
INCLUDES = jpeglib.h jerror.h   jmorecfg.h  jconfig.h  transupp.h  \
	   jdct.h    jinclude.h jmemsys.h   jpegint.h  jversion.h



#===============================================================================
#compile encode lib objects
#===============================================================================
LIB_ENC_OBJECTS = ${SRC_9A}/jcapimin.$(O)   ${SRC_9A}/jcapistd.$(O)   ${SRC_9A}/jcarith.$(O)  \
	          ${SRC_9A}/jccoefct.$(O)   ${SRC_9A}/jccolor.$(O)    ${SRC_9A}/jcdctmgr.$(O) \
	          ${SRC_9A}/jchuff.$(O)     ${SRC_9A}/jcinit.$(O)     ${SRC_9A}/jcmainct.$(O) \
		  ${SRC_9A}/jcmarker.$(O)   ${SRC_9A}/jcmaster.$(O)   ${SRC_9A}/jcparam.$(O)  \
		  ${SRC_9A}/jcprepct.$(O)   ${SRC_9A}/jcsample.$(O)   ${SRC_9A}/jctrans.$(O) \
		  ${SRC_9A}/jfdctflt.$(O)   ${SRC_9A}/jfdctfst.$(O)   ${SRC_9A}/jfdctint.$(O)

ifneq ($(findstring $(CFG_HI_ENC_CFLAGS), CONFIG_GFX_JPGE_ENC_ENABLE),)
LIB_ENC_OBJECTS += ${SRC_HARD_ENC}/jpge_henc_api.$(O)
endif

#===============================================================================
#compile decode lib objects
#===============================================================================
LIB_DEC_OBJECTS = ${SRC_9A}/jdapimin.$(O)   ${SRC_9A}/jdapistd.$(O)  ${SRC_9A}/jdarith.$(O)  \
		  ${SRC_9A}/jdatadst.$(O)   ${SRC_9A}/jdatasrc.$(O)  ${SRC_9A}/jdcoefct.$(O) \
		  ${SRC_9A}/jdcolor.$(O)    ${SRC_9A}/jddctmgr.$(O)  ${SRC_9A}/jdhuff.$(O)   \
		  ${SRC_9A}/jdinput.$(O)    ${SRC_9A}/jdmainct.$(O)  ${SRC_9A}/jdmarker.$(O) \
		  ${SRC_9A}/jdmaster.$(O)   ${SRC_9A}/jdmerge.$(O)   ${SRC_9A}/jdpostct.$(O) \
		  ${SRC_9A}/jdsample.$(O)   ${SRC_9A}/jdtrans.$(O)   ${SRC_9A}/jidctflt.$(O) \
		  ${SRC_9A}/jidctfst.$(O)   ${SRC_9A}/jidctint.$(O)  ${SRC_9A}/jquant1.$(O)  \
	          ${SRC_9A}/jquant2.$(O)    ${SRC_9A}/jdcolor_userbuf.$(O)

LIB_DEC_OBJECTS += ${SRC_9A}/transupp.$(O)

LIB_DEC_OBJECTS += ${SRC_HARD}/hi_jpeg_hdec_api.$(O)  ${SRC_HARD}/jpeg_hdec_adp.$(O)        \
                   ${SRC_HARD}/jpeg_hdec_api.$(O)     ${SRC_HARD}/jpeg_hdec_mem.$(O)        \
                   ${SRC_HARD}/jpeg_hdec_rwreg.$(O)   ${SRC_HARD}/jpeg_hdec_setpara.$(O)    \
                   ${SRC_HARD}/jpeg_hdec_suspend.$(O) ${SRC_HARD}/jpeg_hdec_table.$(O)      \
                   ${SRC_HARD}/jpeg_hdec_csc.$(O)     ${SRC_HARD}/jpeg_hdec_sentstream.$(O) \
                   ${SRC_HARD}/jpeg_hdec_signal.$(O)  ${SRC_HARD}/hi_jpeg_hdec_test.$(O)

#===============================================================================
#compile encode and decode lib objects
#===============================================================================
LIB_COM_OBJECTS = ${SRC_9A}/jaricom.$(O)  ${SRC_9A}/jcomapi.$(O) \
		  ${SRC_9A}/jerror.$(O)   ${SRC_9A}/jutils.$(O)  \
	          ${SRC_9A}/jmemmgr.$(O)
#===============================================================================
#compile lib need memobjects
#===============================================================================
LIB_SYSDEPMEM_OBJECTS = ${SRC_9A}/jmemnobs.$(O)

#===============================================================================
#compile lib need simd objects
#===============================================================================
#LIB_SIMD_OBJECTS = ${SRC_SIMD}/jsimd_arm_neon.$(O)    \
                   ${SRC_SIMD}/jsimd_neon.$(O)

#===============================================================================
#compile lib all objects
#===============================================================================
ifneq ($(findstring $(CFG_HI_SOFT_ENC_CFLAGS), CONFIG_GFX_JPGE_SOFT_ENC_ENABLE),)
LIBOBJECTS = $(LIB_DEC_OBJECTS) $(LIB_COM_OBJECTS) $(LIB_SYSDEPMEM_OBJECTS) $(LIB_SIMD_OBJECTS)
else
LIBOBJECTS = $(LIB_ENC_OBJECTS) $(LIB_DEC_OBJECTS) $(LIB_COM_OBJECTS) $(LIB_SYSDEPMEM_OBJECTS) $(LIB_SIMD_OBJECTS)
endif


#===============================================================================
#begin complie
#===============================================================================
all:  libjpeg9a.a libjpeg9a.so


libjpeg9a.a:  $(LIBOBJECTS)
	${RM}  lib${TARGET}*.a  -rf
	$(AR)  libjpeg9a.a  $(LIBOBJECTS)
	$(AR2) libjpeg9a.a
	ln -s  libjpeg9a.a  libjpeg.a

libjpeg9a.so: $(LIBOBJECTS)
	${RM} -rf lib${TARGET}*.so
	$(CC) -o  libjpeg9a.so -shared $(LIBOBJECTS) ${DEPEND_LIB}
	ln -s  libjpeg9a.so  libjpeg.so


clean:
	@$(RM) -r ${LIBOBJECTS}
	$(RM) *.o *.lo libjpeg*.a libjpeg*.so libjpeg9a.la
	$(RM) -r .libs _libs



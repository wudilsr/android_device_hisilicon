#===============================================================================
# export variables
#===============================================================================
ifeq ($(CFG_HI_EXPORT_FLAG),)
SDK_DIR     := $(shell pwd)/../../../../..
include $(SDK_DIR)/base.mak
endif

#===============================================================================
# local variables
#===============================================================================

ifeq ($(CFG_HI_MINIBOOT_SUPPORT),y)
BOOT_DIR  := $(SDK_DIR)/source/boot/miniboot
else
BOOT_DIR  := $(SDK_DIR)/source/boot/fastboot
endif

ifneq ($(O),)
PRODUCT_DIR := $(O)/product
else
PRODUCT_DIR := $(BOOT_DIR)/../product
endif

ifndef CFLAGS
include $(BOOT_DIR)/define.mak
export MKFLAGS

CC := $(CROSS_COMPILE)gcc

gccincdir := $(shell $(CC) -print-file-name=include)

CFLAGS := -g -Os -D__KERNEL__ -D__ARM__ -fno-strict-aliasing -fno-common -ffixed-r8 \
	  -nostdinc -isystem $(gccincdir) $(MKFLAGS) -I$(PRODUCT_DIR) \
	  -fno-builtin -ffreestanding  -pipe -marm  -mabi=aapcs-linux  \
	  -mno-thumb-interwork -march=armv7-a \
	  -Wall -Wstrict-prototypes -fno-stack-protector
endif

ifeq ($(CFG_HI_MINIBOOT_SUPPORT),y)
CFLAGS   += -I$(BOOT_DIR)/app
CFLAGS   += -I$(PRODUCT_DIR)/driver/include_inc
CFLAGS   += -I$(BOOT_DIR)/arm/s40/include
else
CFLAGS   += -I$(PRODUCT_DIR)/driver/include
CFLAGS   += -I$(BOOT_DIR)/arch/arm/include
CFLAGS   += -I$(BOOT_DIR)/arch/arm/include/asm/
endif

ifeq ($(CFG_HI_ADVCA_VMX_3RD_SIGN),y)
CFLAGS += -DHI_ADVCA_VMX_3RD_SIGN
endif

CFLAGS   += -I$(BOOT_DIR)/include
CFLAGS	 += -I$(PRODUCT_DIR)/driver/advca/common/cipher
CFLAGS	 += -I$(PRODUCT_DIR)/driver/advca/common/ca
CFLAGS   += -I$(PRODUCT_DIR)/driver/include/
CFLAGS	 += -I$(PRODUCT_DIR)/driver/advca/common/alg
CFLAGS	 += -I$(PRODUCT_DIR)/driver/advca/common/auth
CFLAGS	 += -I$(PRODUCT_DIR)/driver/advca/common/include
CFLAGS	 += -I$(PRODUCT_DIR)/driver/include_inc
CFLAGS   += -I$(PRODUCT_DIR)/driver/advca/vmx/vmx_bl_verify_lib
CFLAGS   += -I$(COMPONENT_DIR)/loader/api/include
CFLAGS   += -I$(PRODUCT_DIR)/driver/advca/vmx/3rd

CFLAGS   += -DCA_CMD_SIGN_TYPE_COMMON_TEST
CFLAGS   += -DCA_CMD_SIGN_TYPE_SPECIAL_TEST
CFLAGS   += -DCIPHER_CMD_TEST

LIBS     := libadvca.a

###########################ca_common#####################
ADVCA_COMMON_DIR = $(PRODUCT_DIR)/driver/advca/common
CIPHER_DIR = $(ADVCA_COMMON_DIR)/cipher
ALG_DIR = $(ADVCA_COMMON_DIR)/alg
AUTH_DIR = $(ADVCA_COMMON_DIR)/auth
CA_DIR = $(ADVCA_COMMON_DIR)/ca
VMX_BL_VERIFY_LIB_DIR = $(ADVCA_COMMON_DIR)/../vmx/vmx_bl_verify_lib
VMX_3RD_DIR = $(PRODUCT_DIR)/driver/advca/vmx/3rd

ifeq (${CFG_HI_ADVCA_TYPE},VERIMATRIX)
OBJS += $(patsubst %.c,%.o,$(wildcard $(CA_DIR)/*.c))
OBJS += $(CIPHER_DIR)/drv_cipher.o
OBJS += $(CIPHER_DIR)/drv_cipher_intf.o
OBJS += $(CIPHER_DIR)/hal_cipher.o
OBJS += $(CIPHER_DIR)/unf_cipher.o
ifeq ($(CFG_HI_ADVCA_VMX_3RD_SIGN),y)
OBJS += $(CIPHER_DIR)/drv_rsa_bignum.o
OBJS += $(CIPHER_DIR)/drv_rsa.o
endif
else
OBJS += $(patsubst %.c,%.o,$(wildcard $(ALG_DIR)/*.c))
OBJS += $(patsubst %.c,%.o,$(wildcard $(CA_DIR)/*.c))
OBJS += $(patsubst %.c,%.o,$(wildcard $(CIPHER_DIR)/*.c))
endif

ifdef CFG_HI_ADVCA_TYPE
ifeq (${CFG_HI_ADVCA_TYPE},VERIMATRIX)
OBJS += $(AUTH_DIR)/ca_config.o
OBJS += $(AUTH_DIR)/ca_authenticate.o
OBJS += $(AUTH_DIR)/ca_flash.o
ifeq ($(CFG_HI_ADVCA_VMX_3RD_SIGN),y)
OBJS += $(VMX_3RD_DIR)/vmx_3rd_adp.o
OBJS += $(VMX_3RD_DIR)/vmx_3rd_auth.o
OBJS += $(VMX_3RD_DIR)/vmx_3rd_test.o
endif
else
OBJS += $(patsubst %.c,%.o,$(wildcard $(AUTH_DIR)/*.c))
endif

CFLAGS += -DHI_ADVCA_SUPPORT  -DHI_ADVCA_TYPE_$(CFG_HI_ADVCA_TYPE)
endif

#===============================================================================
# rules
#===============================================================================

.PHONY: all clean install uninstall $(LIBS)

all: $(LIBS)
ifeq (${CFG_HI_ADVCA_TYPE},VERIMATRIX)
	cd $(VMX_BL_VERIFY_LIB_DIR);make;cd -
endif

clean:
	$(AT)rm -rf $(OBJS)
	$(AT)rm -rf $(LIBS)
ifeq (${CFG_HI_ADVCA_TYPE},VERIMATRIX)
	cd $(VMX_BL_VERIFY_LIB_DIR);make clean;cd -
endif

install: all

uninstall:

ifdef CFG_HI_ADVCA_TYPE
$(LIBS): $(OBJS)
	$(AT)$(AR) -rc $@ $(OBJS)
endif

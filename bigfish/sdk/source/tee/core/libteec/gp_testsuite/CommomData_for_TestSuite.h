#ifndef __UUID_FOR_TESTSUITE
#define __UUID_FOR_TESTSUITE

#define UUID_TTA_answerErrorTo_Invoke \
{ \
    0x534D4152, \
    0x542D, \
    0x4353, \
    { \
        0x4C, 0x54, 0x2D, 0x54, 0x41, 0x2D, 0x45, 0x52   \
    } \
}

#define UUID_TTA_answerErrorTo_OpenSession \
{ \
    0x534D4152, \
    0x5443, \
    0x534C, \
    { \
        0x54, 0x45, 0x52, 0x52, 0x54, 0x4F, 0x4F, 0x53   \
    } \
}

#define UUID_TTA_answerSuccessTo_OpenSession_Invoke \
{ \
    0x534D4152, \
    0x542D, \
    0x4353, \
    { \
        0x4C, 0x54, 0x2D, 0x54, 0x41, 0x2D, 0x53, 0x55  \
    } \
}

#define UUID_TTA_check_OpenSession_with_4_parameters \
{ \
    0x534D4152, \
    0x5443, \
    0x534C, \
    { \
        0x54, 0x4F, 0x53, 0x34, 0x50, 0x41, 0x52, 0x4D  \
    } \
}

#define UUID_TTA_testingClientAPI \
{ \
    0x534D4152, \
    0x542D, \
    0x4353, \
    { \
        0x4C, 0x54, 0x2D, 0x54, 0x41, 0x2D, 0x53, 0x54   \
    } \
}

#define UUID_Unknown \
{ \
    0x534D4152, \
    0x542D, \
    0x4355, \
    { \
        0x4E, 0x4B, 0x2D, 0x4E, 0x4F, 0x2D, 0x57, 0x4E   \
    } \
}

#define UUID_TTA_testingInternalAPI_crypto \
{ \
    0x534D4152, \
    0x5443, \
    0x534C, \
    { \
        0x54, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4F, 0x31   \
    } \
}

#define UUID_TTA_testingInternalAPI_dataStorage \
{ \
    0x534D4152, \
    0x5443, \
    0x534C, \
    { \
        0x54, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x31   \
    } \
}

#define COMMAND(NAME,RESULT) {#NAME, NAME, RESULT}
typedef struct Test_GP_FUNC{
    char *name;
    unsigned int (*test_func)(void);
    unsigned int result;
} Test_GP_FUNC;

#define COMMAND_TTA_Check_Expected_ParamTypes   0x00000003
#define COMMAND_TTA_Copy_ParamIn_to_ParamOut   0x00000001
#define COMMAND_TTA_Remember_Expected_ParamTypes   0x00000002
#define COMMAND_TTA_To_Be_Cancelled   0x00000004

#define INVALID_NOT_EXISTING_TEE   "ItIsNotTotosTEEs"

#define VALUE01   0x01234567
#define VALUE02   0xFEDCBA98

#define BIG_SIZE   1024
#define DS_BIG_SIZE   16384
#define SIZE_VALUE01   4
#define SIZE_GREATER_THAN_SIZE_VALUE01   (SIZE_VALUE01 + 1)
#define SIZE_LESSER_THAN_SIZE_VALUE01   (SIZE_VALUE01 - 1)
#define SIZE_OVER_MEMORY   0xFFFFFFFE
#define ZERO   0
#define BIG_VALUE  BIG_SIZE
#define OFFSET0 0
#define INVALID_CONNECTION_METHODS  0x0A

enum TEE_ParamType {
    TEE_PARAM_TYPE_NONE = 0x0,
    TEE_PARAM_TYPE_VALUE_INPUT = 0x1,
    TEE_PARAM_TYPE_VALUE_OUTPUT = 0x2,
    TEE_PARAM_TYPE_VALUE_INOUT = 0x3,
    TEE_PARAM_TYPE_MEMREF_INPUT = 0x5,
    TEE_PARAM_TYPE_MEMREF_OUTPUT = 0x6,
    TEE_PARAM_TYPE_MEMREF_INOUT = 0x7,
};

/*
 * For Crypto
 */
enum TEE_ObjectType{
    TEE_TYPE_AES = 0xA0000010,                    /**< object中的key为AES类型 */
    TEE_TYPE_DES = 0xA0000011,                    /**< object中的key为DES类型 */
    TEE_TYPE_DES3 = 0xA0000013,                   /**< object中的key为DES3类型 */
    TEE_TYPE_HMAC_MD5 = 0xA0000001,               /**< object中的key为HMAC_MD5类型 */
    TEE_TYPE_HMAC_SHA1 = 0xA0000002,              /**< object中的key为HMAC_SHA1类型 */
    TEE_TYPE_HMAC_SHA224 = 0xA0000003,            /**< object中的key为HMAC_SHA224类型 */
    TEE_TYPE_HMAC_SHA256 = 0xA0000004,            /**< object中的key为HMAC_SHA256类型 */
    TEE_TYPE_HMAC_SHA384 = 0xA0000005,            /**< object中的key为HMAC_SHA384类型 */
    TEE_TYPE_HMAC_SHA512 = 0xA0000006,            /**< object中的key为HMAC_SHA512类型 */
    TEE_TYPE_RSA_PUBLIC_KEY = 0xA0000030,         /**< object中的key为RSA_PUBLIC_KEY类型 */
    TEE_TYPE_RSA_KEYPAIR = 0xA1000030,            /**< object中的key为RSA_KEYPAIR类型 */
    TEE_TYPE_DSA_PUBLIC_KEY = 0xA0000031,         /**< object中的key为DSA_PUBLIC_KEY类型 */
    TEE_TYPE_DSA_KEYPAIR = 0xA1000031,            /**< object中的key为DSA_KEYPAIR类型 */
    TEE_TYPE_DH_KEYPAIR = 0xA1000032,             /**< object中的key为DH_KEYPAIR类型 */
    TEE_TYPE_GENERIC_SECRET = 0xA0000000,         /**< object中的key为GENERIC_SECRET类型 */
    TEE_TYPE_DATA = 0xA1000033,                   /**< object没有key，为纯数据类型 */
};

enum TEE_ObjectAttribute{
    TEE_ATTR_SECRET_VALUE = 0xC0000000,                   /**< attribute为SECRET_VALUE */
    TEE_ATTR_RSA_MODULUS = 0xD0000130,                    /**< attribute为RSA_MODULUS */
    TEE_ATTR_RSA_PUBLIC_EXPONENT = 0xD0000230,            /**< attribute为RSA_PUBLIC_EXPONENT */
    TEE_ATTR_RSA_PRIVATE_EXPONENT = 0xC0000330,           /**< attribute为RSA_PRIVATE_EXPONENT */
    TEE_ATTR_RSA_PRIME1 = 0xC0000430,                     /**< attribute为RSA_PRIME1 */
    TEE_ATTR_RSA_PRIME2 = 0xC0000530,                     /**< attribute为RSA_PRIME2 */
    TEE_ATTR_RSA_EXPONENT1 = 0xC0000630,                  /**< attribute为RSA_EXPONENT1 */
    TEE_ATTR_RSA_EXPONENT2 = 0xC0000730,                  /**< attribute为RSA_EXPONENT2 */
    TEE_ATTR_RSA_COEFFICIENT  = 0xC0000830,               /**< attribute为RSA_COEFFICIENT */
    TEE_ATTR_DSA_PRIME = 0xD0001031,                      /**< attribute为DSA_PRIME */
    TEE_ATTR_DSA_SUBPRIME = 0xD0001131,                   /**< attribute为DSA_SUBPRIME */
    TEE_ATTR_DSA_BASE = 0xD0001231,                       /**< attribute为DSA_BASE */
    TEE_ATTR_DSA_PUBLIC_VALUE = 0xD0000131,               /**< attribute为DSA_PUBLIC_VALUE */
    TEE_ATTR_DSA_PRIVATE_VALUE = 0xC0000231,              /**< attribute为DSA_PRIVATE_VALUE */
    TEE_ATTR_DH_PRIME = 0xD0001032,                       /**< attribute为DH_PRIME */
    TEE_ATTR_DH_SUBPRIME = 0xD0001132,                    /**< attribute为DH_SUBPRIME */
    TEE_ATTR_DH_BASE = 0xD0001232,                        /**< attribute为DH_BASE */
    TEE_ATTR_DH_X_BITS = 0xF0001332,                      /**< attribute为DH_X_BITS */
    TEE_ATTR_DH_PUBLIC_VALUE = 0xD0000132,                /**< attribute为DH_PUBLIC_VALUE */
    TEE_ATTR_DH_PRIVATE_VALUE = 0xC0000232,               /**< attribute为DH_PRIVATE_VALUE */
    TEE_ATTR_RSA_OAEP_LABEL = 0xD0000930,                 /**< attribute为RSA_OAEP_LABEL*/
    TEE_ATTR_RSA_PSS_SALT_LENGTH = 0xF0000A30             /**< attribute为RSA_OAEP_LABEL */
};



char TEE_ATTR_RSA_COEFFICIENT_VALUE01[] = {
    0x94,0x65,0xe9,0xd0,0x98,0xf8,0x9c,0x30,0x25,0xa8,0xb1,0x53,0x78,0x61,
    0x01,0x1f,0xde,0x48,0x91,0x92,0x90,0x11,0x6c,0x96,0x27,0xce,0xe1,0x8f,0x7b,
    0x37,0x53,0x25,0x89,0xac,0x2c,0xa8,0x09,0x2b,0xff,0x70,0x42,0x2a,0xca,0xfb,
    0x83,0x68,0xca,0x8f,0xaf,0x1b,0xcd,0x11,0x20,0xfb,0x64,0x74,0x5a,0x35,0xdf,
    0x7d,0x79,0xed,0x29,0xe5,0xf7,0xd9,0xba,0x5d,0x02,0x19,0xb7,0x88,0x74,0x33,
    0x86,0xcd,0x5d,0xc5,0xa2,0x89,0x36,0xbe,0x9e,0xe5,0x84,0xc8,0x08,0xca,0xbc,
    0x85,0xd1,0x95,0x18,0xba,0x0f,0xac,0x4a,0xa1,0x03,0x84,0xe3,0xd3,0x2d,0x38,
    0x81,0xb3,0x11,0x27,0x97,0x1d,0x7e,0x84,0xe8,0xa4,0xc3,0xb2,0x75,0xdf,0x96,
    0x91,0xe0,0x81,0xa6,0x57,0xe9,0x74,0x82,0x88};

char TEE_ATTR_RSA_EXPONENT1_VALUE01[] = {
    0x88,0x14,0x08,0x30,0x55,0x6f,0x85,0x25,0x7b,0x61,0xef,0x47,0xb5,0xf6,
    0x69,0x1a,0xbc,0x34,0xcc,0x80,0x80,0xf5,0x35,0x9b,0x2e,0x86,0xb4,0x3d,0x3f,
    0x16,0xb7,0x18,0x1f,0x2f,0xda,0xd7,0x27,0x7c,0x5e,0x8d,0x15,0xde,0x5e,0x78,
    0xc0,0xa6,0x49,0x94,0x71,0x4b,0x97,0x2e,0x8c,0xf4,0x10,0x66,0x77,0xbf,0x78,
    0x31,0xaf,0xa7,0xd0,0x80,0x3a,0x73,0x13,0x56,0xd4,0x14,0x04,0x74,0x46,0x4e,
    0x91,0x1d,0xdc,0x45,0xa7,0x7c,0x00,0x4b,0x5d,0x34,0x70,0xa0,0x7f,0x95,0xb9,
    0xf2,0x90,0x76,0x6b,0x4d,0x64,0x1c,0x94,0x5b,0x48,0x2b,0xdf,0x37,0x92,0x2d,
    0x8d,0x5e,0x73,0xf6,0x89,0x40,0x2d,0xed,0x55,0xd2,0x40,0x8f,0x38,0x82,0x41,
    0x82,0x64,0xb2,0xb4,0xb0,0xdf,0xc7,0x83,0xc1};

char TEE_ATTR_RSA_EXPONENT2_VALUE01[] = {
    0x40,0x26,0x13,0xa7,0x0f,0x28,0x79,0x92,0xb7,0x88,0xca,0x91,0x0a,0xa2,0xe5,
    0xd1,0x74,0xa4,0xbe,0x5f,0x91,0x8b,0xa8,0xff,0xb9,0x3d,0x01,0xce,0x5a,0xc9,
    0xfd,0xde,0xb0,0xc6,0x1f,0x52,0x08,0xd7,0x46,0x9e,0x3e,0x1e,0x82,0xa5,0x77,
    0x30,0x75,0xb0,0x16,0xb1,0x09,0xbf,0x3f,0x35,0x9f,0x3e,0xcd,0x74,0x02,0x4c,
    0x99,0x69,0xa2,0x02,0x39,0x7c,0x7d,0xd8,0xce,0x92,0xe9,0xa9,0x33,0x0d,0xe5,
    0x3e,0x05,0x3d,0xd0,0x2c,0xf3,0x4a,0xaa,0xdb,0xbe,0xef,0xd5,0x9f,0x2b,0xec,
    0xbf,0xea,0xff,0x75,0x2d,0x6d,0x23,0x12,0x8d,0x53,0xe2,0xca,0x7f,0xdb,0x0d,
    0xbb,0xc6,0x5e,0x16,0xd5,0xb1,0x62,0x8e,0x1b,0xbf,0xbf,0x0e,0x2c,0xb5,0xcf,
    0x54,0x55,0x22,0x21,0xde,0x7d,0xba,0xb1};

#if 0
char TEE_ATTR_RSA_MODULUS_VALUE01[] = {
    0xf0,0x1a,0x95,0xcd,0x5f,0x9f,0x1c,0xbc,0x5c,0x2e,0xc8,0x00,0x3b,0xfa,
    0xe0,0xd5,0x72,0xea,0xfc,0x9e,0x74,0xe1,0x02,0x66,0xa8,0x13,0x3f,0x0c,0xe6,
    0x24,0xcb,0x1c,0xa5,0xdf,0x64,0xfb,0x06,0xd7,0x13,0xce,0xaa,0x6c,0xee,0x16,
    0x7b,0xf8,0x92,0xaf,0xc4,0x5b,0x46,0x18,0xc6,0x30,0xb6,0x04,0x1c,0x3a,0x2e,
    0xd7,0xca,0xb8,0xb5,0x00,0x78,0x89,0xa0,0x69,0x37,0x84,0x59,0x99,0x0c,0x2f,
    0x00,0xe5,0x3b,0xe1,0x18,0xe0,0xb9,0x2e,0x77,0x1d,0x32,0x7e,0x5f,0xf4,0x18,
    0xf3,0x9f,0x58,0xc6,0x83,0xe2,0x7a,0xcb,0x89,0x18,0xc2,0x09,0x84,0x7e,0x9d,
    0x96,0xe0,0xb9,0x49,0x75,0xef,0xcf,0xff,0xf0,0xb6,0x18,0xd3,0x7a,0xc1,0x6f,
    0x0c,0x55,0x33,0xbe,0x9d,0x63,0x06,0xd6,0x9f,0xc1,0xa5,0xe9,0xbd,0xb1,0xb2,
    0x5d,0x5c,0xf9,0xab,0xa9,0xb5,0x6a,0x4e,0xa4,0xfa,0x44,0x32,0xd6,0x71,0x2e,
    0x5f,0xa6,0x25,0xf8,0x40,0x24,0xc4,0x5b,0x61,0x55,0x1b,0xac,0xa3,0x0a,0x11,
    0x8e,0x65,0x20,0xda,0x2c,0x0d,0xdf,0xdb,0x47,0x6b,0x61,0x18,0x4d,0xfe,0xfd,
    0x2a,0x7e,0x77,0x40,0x44,0x43,0xc6,0x33,0x6c,0xe5,0x1b,0x8d,0x80,0xf9,0x97,
    0xa2,0xe4,0xb9,0x34,0x3e,0x28,0x94,0x9f,0xbd,0xa8,0x2b,0x0a,0x4d,0x1a,0xa8,
    0x06,0xe5,0x99,0x4e,0xb9,0x13,0x45,0xc8,0xf6,0x0f,0xd0,0x4d,0xbf,0xe7,0x8f,
    0xed,0xca,0x8e,0xf8,0x8d,0x87,0x5f,0xd4,0xb4,0x1a,0x2c,0xc9,0xa7,0x67,0x7e,
    0xb2,0x1b,0xc1,0xce,0xb6,0x83,0x7c,0xce,0xb4,0x3d,0x85,0xc7,0x53,0x30,0x7c,
    0xfe,0x85};
#endif
char TEE_ATTR_RSA_MODULUS_VALUE01[] =
    {0xb5,0x84,0x8f,0x09,0xa3,0x94,0xac,0x97,0x25,0x17,0x54,0x46,0x6c,0x49,0xcb,0x69,
     0xff,0x21,0x68,0x03,0x1b,0xb9,0xf6,0xe8,0x14,0x84,0xa2,0xa5,0x62,0x39,0x8d,0xe4,
     0x2f,0x22,0xc8,0x53,0xc0,0x8e,0x9a,0x5c,0x6f,0x2b,0xb2,0xa2,0x24,0x77,0x60,0xa1,
     0x47,0xa5,0x6c,0xd5,0xe0,0x77,0x33,0x7a,0xd5,0xf5,0xf6,0x4a,0x0e,0x7d,0x06,0xbd,
     0xb2,0x3b,0x83,0xef,0xaf,0xad,0x65,0xda,0xdb,0xd0,0x7d,0xea,0x09,0x73,0xf8,0x4e,
     0x1b,0xe7,0xaa,0xe6,0x84,0x57,0xb6,0xf3,0x88,0xf3,0xb0,0x4d,0x2b,0xa9,0xe8,0x23,
     0xa3,0xee,0x3f,0x16,0xd0,0x08,0x80,0x38,0x11,0x4a,0x66,0x3a,0xad,0x14,0x68,0xc4,
     0x37,0xce,0x36,0x7a,0xf4,0xe0,0x95,0x0d,0xf3,0xae,0x2b,0x46,0xb7,0xac,0x4a,0x8a,
     0xa0,0xe1,0x78,0xd1,0x38,0xa9,0x36,0xdb,0x3d,0xde,0x04,0xa2,0x35,0x79,0x1f,0xc5,
     0x13,0x39,0xf8,0x5b,0xf3,0x5a,0xb5,0xcb,0xf9,0x8f,0x1c,0xf8,0xad,0x09,0x0f,0x03,
     0x04,0xf3,0xcc,0x02,0x4c,0xa8,0x6d,0xe1,0x0a,0x3f,0x71,0x75,0x69,0xf4,0xd3,0xe6,
     0xa8,0x2c,0x92,0x0b,0xb5,0x6d,0x7d,0xf9,0x61,0x68,0x42,0xd7,0xbe,0xde,0x32,0x9f,
     0xfb,0x7a,0x23,0x2d,0xc5,0x22,0x3d,0x90,0xc3,0x38,0x12,0x5e,0xb0,0x9b,0xc0,0x5c,
     0x7b,0x5d,0x4f,0x7a,0xec,0x65,0xb6,0xe1,0x24,0xfa,0x00,0x15,0xe3,0x5e,0x4f,0x80,
     0x2e,0x79,0xe7,0x29,0xdc,0x4d,0xa2,0x15,0x68,0xe7,0x83,0xc9,0x40,0xfc,0x89,0xa9,
     0x6a,0x47,0xff,0xbc,0x39,0x6d,0x0a,0x75,0xe1,0x6e,0x17,0x39,0x5f,0x1e,0x4f,0xdf};

char TEE_ATTR_RSA_PRIME1_VALUE01[] = {
    0xfe,0x56,0xe9,0x8b,0x84,0xa4,0x6f,0x98,0x45,0xad,0x05,0xbc,0x67,0x04,
    0x5f,0xae,0x08,0xdf,0xe1,0x8c,0xcd,0x49,0x1d,0x9d,0x8e,0x1e,0x82,0x47,0x0c,
    0x3c,0x70,0x40,0x2d,0x61,0xe7,0xde,0xd7,0x6e,0xb9,0xeb,0xf0,0xa9,0xff,0x59,
    0xe1,0xf8,0xb7,0x20,0x9c,0xc4,0x13,0xd0,0xd6,0x41,0xfb,0x2b,0xb0,0x9b,0xf2,
    0x93,0x20,0x9a,0x32,0x67,0xed,0xaf,0x25,0xdc,0xa8,0xc2,0x8f,0x28,0xab,0xf8,
    0xed,0xb1,0x3f,0x65,0xd4,0xe8,0x48,0xf2,0x41,0x88,0x21,0xcb,0xab,0x1e,0xf7,
    0x97,0x68,0xe8,0x32,0x7d,0xec,0x18,0xf1,0x83,0x91,0x13,0xf8,0x8c,0x89,0xe1,
    0x0a,0x6c,0xff,0x82,0xc1,0x07,0x00,0xbd,0xbc,0x20,0xa3,0x51,0x6d,0x86,0x5a,
    0x19,0x29,0x19,0x02,0x2f,0xed,0x41,0x08,0x89};

char TEE_ATTR_RSA_PRIME2_VALUE01[] = {
    0xf1,0xab,0xe1,0x59,0x38,0x71,0x9e,0x55,0x22,0x40,0x6d,0xa1,0xc6,0xb9,
    0x6d,0xba,0x57,0x53,0xec,0xfd,0xd2,0x22,0x2d,0xba,0x74,0x9e,0xdc,0x33,0x83,
    0xcd,0x44,0xd2,0x7a,0x63,0xf3,0xe0,0x55,0x5f,0x4b,0x03,0xe5,0x58,0x7b,0xe8,
    0x99,0x5e,0x8c,0x75,0x34,0x3a,0xa2,0x96,0x3c,0x3b,0x13,0xaa,0xb7,0x58,0x1d,
    0xad,0x2c,0x88,0xbb,0x99,0x0a,0x0b,0xff,0x9b,0x68,0x4d,0x96,0x1a,0xe9,0x52,
    0xf1,0xa2,0xcb,0xb9,0xe9,0xe8,0x63,0x3d,0x40,0x14,0x64,0xb5,0xd6,0xe5,0xf2,
    0x2a,0x70,0x4f,0x1a,0xab,0x03,0x63,0xaa,0x0d,0xc7,0xb3,0xf3,0x06,0xb0,0xca,
    0xb1,0x48,0x0d,0x18,0x63,0x2e,0xcc,0xd9,0xca,0x2c,0x5a,0x1a,0x75,0x50,0x0e,
    0x11,0xb0,0xd5,0xa7,0x74,0x25,0xe7,0x0f,0x1d};

#if 0
char TEE_ATTR_RSA_PRIVATE_EXPONENT_VALUE01[] = {
    0xa5,0x0d,0xe1,0x84,0xf9,0x02,0xec,0x42,0x20,0x2c,0x98,0x98,0x70,0xa3,
    0x1a,0x04,0x21,0xa7,0xa0,0x59,0x5d,0x87,0x80,0x9b,0x09,0x57,0x91,0xb4,0x50,
    0x51,0x62,0xbf,0x22,0xd7,0xdb,0x17,0x25,0xb0,0x9c,0x91,0x29,0x5f,0x10,0x9c,
    0xac,0x44,0x48,0xb2,0x43,0x8d,0x6b,0x36,0x84,0xa7,0xdf,0xb8,0x1b,0x9f,0x73,
    0xac,0x2c,0x53,0xa5,0x39,0xd9,0xa2,0xe2,0x7e,0xf2,0x07,0x2d,0x80,0xa4,0x7b,
    0x7b,0x66,0x1a,0x2f,0xb7,0x66,0x64,0x66,0xa8,0xc3,0x8d,0x7e,0x8a,0x7f,0xc6,
    0xd7,0x52,0xe7,0x38,0x30,0x59,0x74,0x88,0x8e,0x8a,0x52,0x79,0x30,0x77,0xc9,
    0xe5,0x7a,0x3e,0x65,0x5d,0x89,0xa9,0xb7,0x0b,0xc6,0x62,0x72,0x9e,0xa4,0x72,
    0xae,0x4b,0xb3,0xf2,0x89,0x47,0x15,0xe0,0x5b,0x45,0x4d,0x99,0x5b,0x13,0x6c,
    0x90,0xbe,0xe5,0xb5,0x98,0xad,0x87,0x99,0x1a,0x57,0xd4,0x1f,0xf1,0x52,0x71,
    0x5b,0x51,0x40,0xdc,0x51,0x35,0xf6,0x6c,0xae,0xa3,0xf9,0x0f,0x3a,0xed,0x28,
    0xfc,0xa5,0x60,0x2f,0x4b,0x4f,0x31,0xac,0x48,0x3e,0x5b,0xba,0xe4,0x2b,0x58,
    0x79,0xe6,0xb4,0x6b,0x5e,0x56,0x0a,0xb2,0xdb,0x68,0xed,0x24,0xd8,0x5e,0x6f,
    0x30,0x59,0x8d,0x8c,0xa3,0x00,0x68,0xf5,0x42,0x95,0x1a,0x0b,0xa8,0x1c,0xfb,
    0xdf,0x29,0x81,0x10,0x32,0x02,0xcc,0x51,0xa4,0x17,0x14,0x3e,0xef,0x89,0x41,
    0xde,0xf8,0x2d,0x64,0x69,0x30,0xe8,0x8a,0xad,0x96,0xf6,0xf4,0x82,0x83,0x9a,
    0x77,0xe7,0xde,0x12,0x31,0xf7,0x15,0xec,0xce,0xed,0x83,0x68,0x88,0x84,0xe5,
    0x64,0x81};
#endif
char TEE_ATTR_RSA_PRIVATE_EXPONENT_VALUE01[] =
    {0x0c,0x5b,0xc0,0x19,0x59,0xe7,0xcf,0x70,0x62,0xf8,0x19,0xa6,0xc9,0xcc,0xa4,0x6a,
     0xcd,0x12,0x0b,0x30,0xda,0xfc,0x68,0x51,0x18,0xc4,0x87,0x06,0x57,0x8f,0xaf,0x97,
     0x6f,0x96,0x20,0xa9,0x83,0x1c,0xb2,0x69,0xc4,0xaf,0xe6,0xf3,0x9f,0x23,0xf9,0x92,
     0x41,0x7c,0x83,0xd2,0x73,0xfb,0xe9,0xa7,0x5d,0x55,0xe7,0xb4,0xd7,0x13,0xb0,0x17,
     0xce,0x40,0xbb,0x14,0xe0,0x93,0x1f,0xb2,0x2c,0xf1,0x1f,0x01,0x86,0x2f,0x3d,0x22,
     0xa4,0x47,0xbb,0x9d,0x02,0x39,0xae,0x9d,0x1a,0x1f,0xed,0x4a,0xf3,0xc4,0x17,0xa8,
     0x05,0x8b,0x3d,0x04,0x62,0x99,0x91,0x91,0x3f,0xac,0x1f,0x15,0xb3,0x9f,0x06,0x1b,
     0x05,0xe9,0xa6,0x4f,0xec,0xc8,0x35,0x9d,0xc3,0x8f,0x82,0x26,0xc8,0x6e,0x94,0x8c,
     0x8a,0x29,0x42,0x10,0x91,0x72,0xf7,0x6c,0xe3,0xb0,0x07,0x0b,0x2f,0xff,0x33,0x84,
     0xc3,0x5a,0xc2,0x13,0x15,0xd3,0xe2,0xdb,0x98,0x2f,0x44,0xba,0x34,0xcb,0xbe,0x63,
     0x6b,0x73,0x36,0xe5,0x27,0x11,0x70,0x6d,0x7a,0xb2,0x74,0x34,0xb6,0x8f,0xe9,0x09,
     0x57,0x67,0xc8,0x50,0x1c,0x7e,0x7b,0xe6,0xd4,0xb8,0xaf,0x7c,0xbe,0x2d,0x16,0x0f,
     0x76,0x44,0x3a,0xfe,0x8d,0x6d,0xc8,0xec,0xa9,0xd5,0x48,0x1f,0xbb,0x85,0x50,0x3f,
     0xef,0xbd,0x8b,0xfd,0x9f,0xf1,0xb8,0x00,0x09,0x67,0x49,0x74,0xc5,0xe9,0xf2,0xd5,
     0x26,0xf1,0x93,0x59,0x73,0xf7,0x84,0x98,0xa5,0xa3,0x25,0xbe,0x73,0xc8,0x1c,0xb4,
     0x1c,0xef,0xbb,0x20,0x59,0x4f,0x3a,0x74,0x92,0xda,0x15,0x76,0xa4,0x12,0xb0,0x21};

#if 0
char TEE_ATTR_RSA_PUBLIC_EXPONENT_VALUE01[] = {
    0x00, 0x10, 0x00, 0x01};
#endif
char TEE_ATTR_RSA_PUBLIC_EXPONENT_VALUE01[] =
    {0x01,0x00,0x01};

#define LEN_OF_TEE_ATTR_RSA_COEFFICIENT_VALUE01 128
#define LEN_OF_TEE_ATTR_RSA_EXPONENT1_VALUE01 128
#define LEN_OF_TEE_ATTR_RSA_EXPONENT2_VALUE01 128
#define LEN_OF_TEE_ATTR_RSA_MODULUS_VALUE01 256
#define LEN_OF_TEE_ATTR_RSA_PRIME1_VALUE01 128
#define LEN_OF_TEE_ATTR_RSA_PRIME2_VALUE01 128
#define LEN_OF_TEE_ATTR_RSA_PRIVATE_EXPONENT_VALUE01 256
#define LEN_OF_TEE_ATTR_RSA_PUBLIC_EXPONENT_VALUE01 4
#define TEE_ATTR_VALUE_VALUE01   0x56789430

char DATA_FOR_CRYPTO1[] = {
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
    0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
    0x0F,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
    0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
    0x0F,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00};
char DATA_FOR_CRYPTO1_PART1[] = {
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
    0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
char DATA_FOR_CRYPTO1_PART2[] = {
    0x0F,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F};
char DATA_FOR_CRYPTO1_PART3[] = {
    0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
    0x0F,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00};

char TEE_ATTR_AES_256_VALUE01[] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae,
                                      0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61,
                                      0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
char AAD1_VALUE[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
char IV1_VALUE_64bits_DES_DES3[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8};
char IV2_VALUE_128bits_AES[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0x0,0xa,0xb,0xc,0xd,0xe,0xf};
char IV_INVALID_LENGTH_VALUE[] = {0x01,0x02,0x03,0x04,0x05};
char NONCE1_VALUE_AES_CCM[] = {0x00,0x8D,0x49,0x3B,0x30,0xAE,0x8B,0x3C,0x96,0x96,0x76,0x6C,0xFA};
char NONCE2_VALUE_AES_GCM[] = {0xca,0xfe,0xba,0xbe,0xfa,0xce,0xdb,0xad,0xde,0xca,0xf8,0x88};
char TEE_ATTR_DES_64_VALUE01[] = {0xCD, 0xFE, 0x56, 0xB7, 0xB7, 0x2F, 0xAE, 0x6A};
char TEE_ATTR_DH_BASE_VALUE01[] = {0x1c,0xe0,0xf6,0x69,0x26,0x46,0x11,0x97,0xef,0x45,0xc4,0x65,0x8b,0x83,0xb8,0xab
                                ,0x04,0xa9,0x22,0x42,0x68,0x50,0x4d,0x05,0xb8,0x19,0x83,0x99,0xdd,0x71,0x37,0x18
                                ,0xcc,0x1f,0x24,0x5d,0x47,0x6c,0xcf,0x61,0xa2,0xf9,0x34,0x93,0xf4,0x1f,0x55,0x52
                                ,0x48,0x65,0x57,0xe6,0xd4,0xca,0xa8,0x00,0xd6,0xd0,0xdb,0x3c,0xbf,0x5a,0x95,0x4b
                                ,0x20,0x8a,0x4e,0xba,0xf7,0xe6,0x49,0xfb,0x61,0x24,0xd8,0xa2,0x1e,0xf2,0xf2,0x2b
                                ,0xaa,0xae,0x29,0x21,0x10,0x19,0x10,0x51,0x46,0x47,0x31,0xb6,0xcc,0x3c,0x93,0xdc
                                ,0x6e,0x80,0xba,0x16,0x0b,0x66,0x64,0xa5,0x6c,0xfa,0x96,0xea,0xf1,0xb2,0x83,0x39
                                ,0x8e,0xb4,0x61,0x64,0xe5,0xe9,0x43,0x84,0xee,0x02,0x24,0xe7,0x1f,0x03,0x7c,0x23};
char TEE_ATTR_DH_PRIME_VALUE01[] = {0xe0,0x01,0xe8,0x96,0x7d,0xb4,0x93,0x53,0xe1,0x6f,0x8e,0x89,0x22,0x0c,0xce,0xfc
                                    ,0x5c,0x5f,0x12,0xe3,0xdf,0xf8,0xf1,0xd1,0x49,0x90,0x12,0xe6,0xef,0x53,0xe3,0x1f
                                    ,0x02,0xea,0xcc,0x5a,0xdd,0xf3,0x37,0x89,0x35,0xc9,0x5b,0x21,0xea,0x3d,0x6f,0x1c
                                    ,0xd7,0xce,0x63,0x75,0x52,0xec,0x38,0x6c,0x0e,0x34,0xf7,0x36,0xad,0x95,0x17,0xef
                                    ,0xfe,0x5e,0x4d,0xa7,0xa8,0x6a,0xf9,0x0e,0x2c,0x22,0x8f,0xe4,0xb9,0xe6,0xd8,0xf8
                                    ,0xf0,0x2d,0x20,0xaf,0x78,0xab,0xb6,0x92,0xac,0xbc,0x4b,0x23,0xfa,0xf2,0xc5,0xcc
                                    ,0xd4,0x9a,0x0c,0x9a,0x8b,0xcd,0x91,0xac,0x0c,0x55,0x92,0x01,0xe6,0xc2,0xfd,0x1f
                                    ,0x47,0xc2,0xcb,0x2a,0x88,0xa8,0x3c,0x21,0x0f,0xc0,0x54,0xdb,0x29,0x2d,0xbc,0x45};
char TEE_ATTR_DH_PUBLIC_VALUE_VALUE01[] = {0xbb,0xe9,0x18,0xdd,0x4b,0x2b,0x94,0x1b,0x10,0x0e,0x88,0x35,0x28,0x68,0xfc,0x62
                                        ,0x04,0x38,0xa6,0xdb,0x32,0xa6,0x9e,0xee,0x6c,0x6f,0x45,0x1c,0xa3,0xa6,0xd5,0x37
                                        ,0x77,0x75,0x5b,0xc1,0x37,0x0a,0xce,0xfe,0x2b,0x8f,0x13,0xa9,0x14,0x2c,0x5b,0x44
                                        ,0x15,0x78,0x86,0x30,0xd6,0x95,0xb1,0x92,0x20,0x63,0xa3,0xcf,0x9d,0xef,0x65,0x61
                                        ,0x27,0x4d,0x24,0x01,0xe7,0xa1,0x45,0xf2,0xd8,0xb9,0x3a,0x45,0x17,0xf4,0x19,0xd0
                                        ,0x5e,0xf8,0xcb,0x35,0x59,0x37,0x9d,0x04,0x20,0xa3,0xbf,0x02,0xad,0xfe,0xa8,0x60
                                        ,0xb2,0xc3,0xee,0x85,0x58,0x90,0xf3,0xb5,0x57,0x2b,0xb4,0xef,0xd7,0x8f,0x37,0x68
                                        ,0x78,0x7c,0x71,0x52,0x9d,0x5e,0x0a,0x61,0x4f,0x09,0x89,0x92,0x39,0xf7,0x4b,0x01};
char TEE_ATTR_DH_PRIVATE_VALUE_VALUE01[] = {0x53,0x8d,0x3d,0x64,0x27,0x4a,0x40,0x05,0x9b,0x9c,
                                            0x26,0xe9,0x13,0xe6,0x91,0x53,0x23,0x7b,0x55,0x83};
char TEE_ATTR_HMAC_SHA1_256_VALUE01[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
                                        ,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f};
char TEE_ATTR_HMAC_SHA224_256_VALUE01[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
                                        ,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f};
char TEE_ATTR_HMAC_SHA256_512_VALUE01[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
                                        ,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
                                        ,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f
                                        ,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f};
char TEE_ATTR_HMAC_SHA384_512_VALUE01[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
                                        ,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
                                        ,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f
                                        ,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f};
char TEE_ATTR_HMAC_SHA512_512_VALUE01[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
                                        ,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
                                        ,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f
                                        ,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f};
char IV2_LENGTH_128bits_AES [] ={0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x00,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
char TEE_ATTR_DES3_192_VALUE01[]={0xcd,0xfe,0x56,0xb7,0xb7,0x2f,0xae,0x6a,0x04,0x73,0x41,0xf0,0x03,0xd7,0xa4,0x8d,0x89,0x5c,0xad,0xf2,0x9c,0x63,0xef,0x24};

char TEE_ATTR_DSA_BASE_VALUE01[]={0x9a,0x09,0x32,0xb3,0x8c,0xb2,0x10,0x5b,0x93,0x00,0xdc,0xb8,0x66,0xc0,
0x66,0xd9,0xce,0xc6,0x43,0x19,0x2f,0xcb,0x28,0x34,0xa1,0x23,0x9d,0xba,0x28,0xbd,0x09,0xfe,0x01,0x00,0x1e,0x04,0x51,0xf9,0xd6,0x35,0x1f,0x6e,0x56,0x4a,0xfb,0xc8,0xf8,0xc3,0x9b
,0x10,0x59,0x86,0x3e,0xbd,0x09,0x85,0x09,0x0b,0xd5,0x5c,0x82,0x8e,0x9f,0xc1,0x57,0xac,0x7d,0xa3,0xcf,0xc2,0x89,0x2a,0x0e,0xd9,0xb9,0x32,0x39,0x05,0x82,0xf2,0x97,0x1e
,0x4a,0x0c,0x48,0x3e,0x06,0x22,0xd7,0x31,0x66,0xbf,0x62,0xa5,0x9f,0x26};
char TEE_ATTR_DSA_PRIME_VALUE01[]={0xf6,0xad,0x20,0x71,0xe1,0x5a,0x4b,0x9c,0x2b,0x7e,0x53,0x26,0xda,0x43,0x9d,0xc1,0x47,0x4c,0x1a,0xd1,0x6f,0x2f,0x85,0xe9,0x2c,0xea,0x89
,0xfc,0xdc,0x74,0x66,0x11,0xcf,0x30,0xdd,0xc8,0x5e,0x33,0xf5,0x83,0xc1,0x9d,0x10,0xbc,0x1a,0xc3,0x93,0x22,0x26,0x24,0x6f,0xa7,0xb9,0xe0,0xdd,0x25,0x77,0xb5,0xf4
,0x27,0x59,0x4c,0x39,0xfa,0xeb,0xfc,0x59,0x8a,0x32,0xe1,0x74,0xcb,0x8a,0x68,0x03,0x57,0xf8,0x62,0xf2,0x0b,0x6e,0x84,0x32,0xa5,0x30,0x65,0x2f,0x1c,0x21
,0x39,0xae,0x1f,0xaf,0x76,0x8b,0x83};
char TEE_ATTR_DSA_SUBPRIME_VALUE01[]={0x87,0x44,0xe4,0xdd,0xc6,0xd0,0x19,0xa5,0xea,0xc2,0xb1,0x5a,0x15,0xd7,0xe1,0xc7,0xf6,0x63,0x35,0xf7};
char TEE_ATTR_DSA_PRIVATE_VALUE_VALUE01[]={0x70,0x4a,0x46,0xc6,0x25,0x2a,0x95,0xa3,0x9b,0x40,0xe0,0x43,0x5a,0x69,0x1b,0xad,0xae,0x52,0xa5,0xc0};
char TEE_ATTR_DSA_PUBLIC_VALUE_VALUE01[]={0x52,0x9d,0xed,0x98,0xa2,0x32,0x09,0x85,0xfc,0x84,0xb6,0x5a,0x9d,0xc8,0xd4,0xfe,0x41,0xad,0xa6,0xe3,0x59,0x3d,0x70,0x4f
,0x08,0x98,0xc1,0x4e,0xc2,0x46,0x34,0xdd,0xf5,0xf1,0xdb,0x47,0xcc,0x49,0x15,0xfc,0xe1,0xe2,0x67,0x4d,0x2e
,0xcd,0x98,0xd5,0x8b,0x59,0x8e,0x8d,0xdf,0xaf,0xf3,0x0e,0x88,0x26,0xf5,0x0a,0xab,0x40,0x27,0xb5,0xaa,0xb8,0x87,0xc1,0x9a,0xd9,0x6d,0x7e,0x57,0xde,0x53
,0x90,0xad,0x8e,0x55,0x57,0xb4,0x1a,0x80,0x19,0xc9,0x0d,0x80,0x60,0x71,0x79,0xb5,0x4e,0xb0,0xad,0x4d,0x23};

#define LENGTH_DATA_FOR_CRYPTO1   96
#define LENGTH_DATA_FOR_CRYPTO1_PART1   32
#define LENGTH_DATA_FOR_CRYPTO1_PART2   32
#define LENGTH_DATA_FOR_CRYPTO1_PART3   32

#define OUTPUT_BUFFER_NORMAL   1
#define OUTPUT_BUFFER_TOO_SHORT   2

#define OBJECT_HANDLE_01   1
#define OBJECT_HANDLE_02   2
#define OBJECT_HANDLE_INVALID   4
#define OPERATION_HANDLE_01   1
#define OPERATION_HANDLE_02   2
#define OPERATION_HANDLE_INVALID   4

#define CMD_Crypto_AEDecryptFinal   0x0001001B
#define CMD_Crypto_AEEncryptFinal   0x0001001A
#define CMD_Crypto_AEInit   0x00010017
#define CMD_Crypto_AEUpdate   0x00010018
#define CMD_Crypto_AEUpdateAAD   0x00010019
#define CMD_Crypto_AllocateOperation   0x00010003
#define CMD_Crypto_AsymmetricDecrypt   0x00010014
#define CMD_Crypto_AsymmetricEncrypt   0x00010013
#define CMD_Crypto_AsymmetricSignDigest   0x00010015
#define CMD_Crypto_AsymmetricVerifyDigest   0x00010016
#define CMD_Crypto_CipherDoFinal   0x0001000E
#define CMD_Crypto_CipherInit   0x0001000C
#define CMD_Crypto_CipherUpdate   0x0001000D
#define CMD_Crypto_CopyOperation   0x00010008
#define CMD_Crypto_DeriveKey   0x0001001D
#define CMD_Crypto_DigestDoFinal   0x0001000B
#define CMD_Crypto_DigestUpdate   0x0001000A
#define CMD_Crypto_FreeAllKeysAndOperations   0x00010002
#define CMD_Crypto_GenerateRandom   0x0001001E
#define CMD_Crypto_GetOperationInfo   0x00010009
#define CMD_Crypto_InitObjectWithKeys   0x00010001
#define CMD_Crypto_MACCompareFinal   0x00010012
#define CMD_Crypto_MACComputeFinal   0x00010011
#define CMD_Crypto_MACInit   0x0001000F
#define CMD_Crypto_MACUpdate   0x00010010
#define CMD_Crypto_ResetOperation   0x00010005
#define CMD_Crypto_SetOperationKey   0x00010006
#define CMD_Crypto_SetOperationKey2   0x00010007

#if 0
#define KEY_SIZE_TOO_LARGE   4096/8
#define SIZE_AES_256   256/8
#define SIZE_DES3_192   192/8
#define SIZE_DES_64   64/8
#define SIZE_DH_KEYPAIR_1024   1024/8
#define SIZE_DSA_KEYPAIR_768   768/8
#define SIZE_DSA_PUBLIC_KEY_768   768/8
#define SIZE_GENERIC_SECRET_2048   2048/8
#define SIZE_HMAC_MD5_256   256/8
#define SIZE_HMAC_SHA1_256   256/8
#define SIZE_HMAC_SHA224_256   256/8
#define SIZE_HMAC_SHA256_512   512/8
#define SIZE_HMAC_SHA384_512   512/8
#define SIZE_HMAC_SHA512_512   512/8
#define SIZE_RSA_KEYPAIR_2048   2048/8
#define SIZE_RSA_PUBLIC_KEY_2048   2048/8
#define SIZE_ZERO   0
#define WRONG_SIZE   5
#endif
#define    AES_104_bits   104
#define    AES_112_bits   112
#define    AES_120_bits   120
#define    AES_128_bits   128
#define    AES_32_bits    32
#define    AES_48_bits    48
#define    AES_64_bits    64
#define    AES_96_bits    96
#define    AAD1_LENGTH    8
#define    NULL   0
#define    INVALID_MAC   0
#define    VALID_MAC   1

enum __TEE_CRYPTO_ALGORITHM_ID {
    TEE_ALG_INVALID = 0x0,                              /**< 无效ID */
    TEE_ALG_AES_ECB_NOPAD =  0x10000010,                /**< AES_ECB_NOPAD */
    TEE_ALG_AES_CBC_NOPAD = 0x10000110,                 /**< AES_CBC_NOPAD */
    TEE_ALG_AES_CTR = 0x10000210,                       /**< AES_CTR */
    TEE_ALG_AES_CTS = 0x10000310,                       /**< AES_CTS */
    TEE_ALG_AES_XTS = 0x10000410,                       /**< AES_XTS */
    TEE_ALG_AES_CBC_MAC_NOPAD = 0x30000110,             /**< AES_CBC_MAC_NOPAD */
    TEE_ALG_AES_CBC_MAC_PKCS5 = 0x30000510,             /**< AES_CBC_MAC_PKCS5 */
    TEE_ALG_AES_CMAC = 0x30000610,                      /**< AES_CMAC */
    TEE_ALG_AES_CCM = 0x40000710,                       /**< AES_CCM */
    TEE_ALG_AES_GCM = 0x40000810,                       /**< AES_GCM */
    TEE_ALG_DES_ECB_NOPAD = 0x10000011,                 /**< DES_ECB_NOPAD */
    TEE_ALG_DES_CBC_NOPAD = 0x10000111,                 /**< DES_CBC_NOPAD */
    TEE_ALG_DES_CBC_MAC_NOPAD = 0x30000111,             /**< DES_CBC_MAC_NOPAD */
    TEE_ALG_DES_CBC_MAC_PKCS5 = 0x30000511,             /**< DES_CBC_MAC_PKCS5 */
    TEE_ALG_DES3_ECB_NOPAD = 0x10000013,                /**< DES3_ECB_NOPAD */
    TEE_ALG_DES3_CBC_NOPAD = 0x10000113,                /**< DES3_CBC_NOPAD */
    TEE_ALG_DES3_CBC_MAC_NOPAD = 0x30000113,            /**< DES3_CBC_MAC_NOPAD */
    TEE_ALG_DES3_CBC_MAC_PKCS5 = 0x30000513,            /**< DES3_CBC_MAC_PKCS5 */
    TEE_ALG_RSASSA_PKCS1_V1_5_MD5 = 0x70001830,         /**< RSASSA_PKCS1_V1_5_MD5 */
    TEE_ALG_RSASSA_PKCS1_V1_5_SHA1 = 0x70002830,        /**< RSASSA_PKCS1_V1_5_SHA1 */
    TEE_ALG_RSASSA_PKCS1_V1_5_SHA224 = 0x70003830,      /**< RSASSA_PKCS1_V1_5_SHA224 */
    TEE_ALG_RSASSA_PKCS1_V1_5_SHA256 = 0x70004830,      /**< RSASSA_PKCS1_V1_5_SHA256 */
    TEE_ALG_RSASSA_PKCS1_V1_5_SHA384 = 0x70005830,      /**< RSASSA_PKCS1_V1_5_SHA384 */
    TEE_ALG_RSASSA_PKCS1_V1_5_SHA512 = 0x70006830,      /**< RSASSA_PKCS1_V1_5_SHA512 */
    TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1 = 0x70212930,    /**< RSASSA_PKCS1_PSS_MGF1_SHA1 */
    TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224 = 0x70313930,  /**< RSASSA_PKCS1_PSS_MGF1_SHA224 */
    TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256 = 0x70414930,  /**< RSASSA_PKCS1_PSS_MGF1_SHA256 */
    TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384 = 0x70515930,  /**< RSASSA_PKCS1_PSS_MGF1_SHA384 */
    TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512 = 0x70616930,  /**< RSASSA_PKCS1_PSS_MGF1_SHA512 */
    TEE_ALG_RSAES_PKCS1_V1_5 = 0x60000130,              /**< RSAES_PKCS1_V1_5 */
    TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1 = 0x60210230,    /**< RSAES_PKCS1_OAEP_MGF1_SHA1 */
    TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224 = 0x60211230,  /**< RSAES_PKCS1_OAEP_MGF1_SHA224 */
    TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256 = 0x60212230,  /**< RSAES_PKCS1_OAEP_MGF1_SHA256 */
    TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384 = 0x60213230,  /**< RSAES_PKCS1_OAEP_MGF1_SHA384 */
    TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512 = 0x60214230,  /**< RSAES_PKCS1_OAEP_MGF1_SHA512 */
    TEE_ALG_RSA_NOPAD = 0x60000030,                     /**< RSA_NOPAD */
    TEE_ALG_DSA_SHA1 = 0x70002131,                      /**< DSA_SHA1 */
    TEE_ALG_DH_DERIVE_SHARED_SECRET = 0x80000032,       /**< DH_DERIVE_SHARED_SECRET */
    TEE_ALG_MD5 = 0x50000001,                           /**< MD5 */
    TEE_ALG_SHA1 = 0x50000002,                          /**< SHA1 */
    TEE_ALG_SHA224 = 0x50000003,                        /**< SHA224 */
    TEE_ALG_SHA256 = 0x50000004,                        /**< SHA256 */
    TEE_ALG_SHA384 = 0x50000005,                        /**< SHA384 */
    TEE_ALG_SHA512 = 0x50000006,                        /**< SHA512 */
    TEE_ALG_HMAC_MD5 = 0x30000001,                      /**< HMAC_MD5 */
    TEE_ALG_HMAC_SHA1 = 0x30000002,                     /**< HMAC_SHA1 */
    TEE_ALG_HMAC_SHA224 = 0x30000003,                   /**< HMAC_SHA224 */
    TEE_ALG_HMAC_SHA256 = 0x30000004,                   /**< HMAC_SHA256 */
    TEE_ALG_HMAC_SHA384 = 0x30000005,                   /**< HMAC_SHA384 */
    TEE_ALG_HMAC_SHA512 = 0x30000006                    /**< HMAC_SHA512 */
} ;

enum __TEE_OperationMode {
    TEE_MODE_ENCRYPT = 0x0, /**< 加密 */
    TEE_MODE_DECRYPT,       /**< 解密 */
    TEE_MODE_SIGN,          /**< 签名 */
    TEE_MODE_VERIFY,        /**< 验证 */
    TEE_MODE_MAC,           /**< MAC */
    TEE_MODE_DIGEST,        /**< 摘要 */
    TEE_MODE_DERIVE        /**< 派生 */
};

enum __TEE_Operation_Constants {
    TEE_OPERATION_CIPHER = 0x1,         /**< 加解密 */
    TEE_OPERATION_MAC,                  /**< MAC */
    TEE_OPERATION_AE,                   /**< 认证加密 */
    TEE_OPERATION_DIGEST,               /**< 摘要 */
    TEE_OPERATION_ASYMMETRIC_CIPHER,    /**< 非对称加解密 */
    TEE_OPERATION_ASYMMETRIC_SIGNATURE, /**< 非对称签名 */
    TEE_OPERATION_ASYMMETRIC_VERIFY,    /**< 非对称认证 */
    TEE_OPERATION_KEY_DERIVATION        /**< 密钥派生 */
};

enum Usage_Constants{
    TEE_USAGE_EXTRACTABLE = 0x00000001,    /**< object的key可以提取 */
    TEE_USAGE_ENCRYPT = 0x00000002,        /**< object的key可以用于加密 */
    TEE_USAGE_DECRYPT = 0x00000004,        /**< object的key可以用于解密 */
    TEE_USAGE_MAC = 0x00000008,            /**< object的key用于hash操作 */
    TEE_USAGE_SIGN = 0x00000010,           /**< object的key用于签名操作 */
    TEE_USAGE_VERIFY = 0x00000020,         /**< object的key用于验证操作 */
    TEE_USAGE_DERIVE = 0x00000040,         /**< object的key用于产生key的操作 */
    TEE_USAGE_DEFAULT = 0xFFFFFFFF,        /**< object初始化使用，默认赋给所有权限 */
};

enum __TEE_ObjectSize {
    KEY_SIZE_TOO_LARGE = 4096,
    SIZE_AES_256 = 256,
    SIZE_DES3_192 = 192,
    SIZE_DES_64 = 64,
    SIZE_DH_KEYPAIR_1024 = 1024,
    SIZE_DSA_KEYPAIR_768 = 768,
    SIZE_DSA_PUBLIC_KEY_768 = 768,
    SIZE_GENERIC_SECRET_2048= 2048,
    SIZE_HMAC_MD5_256 = 256,
    SIZE_HMAC_SHA1_256 = 256,
    SIZE_HMAC_SHA224_256 = 256,
    SIZE_HMAC_SHA256_512 = 512,
    SIZE_HMAC_SHA384_512 = 512,
    SIZE_HMAC_SHA512_512 = 512,
    SIZE_RSA_KEYPAIR_2048 = 2048,
    SIZE_RSA_PUBLIC_KEY_2048 = 2048,
    SIZE_ZERO = 0,
    WRONG_SIZE = 5
};
enum TEE_Result_Value{
    TEE_SUCCESS = 0x0,                          /**< 成功  */
    TEE_ERROR_INVALID_CMD,                      /**< 非法命令 */
    TEE_ERROR_SERVICE_NOT_EXIST,                /**< 服务不存在 */
    TEE_ERROR_SESSION_NOT_EXIST,                /**< 连接不存在 */
    TEE_ERROR_SESSION_MAXIMUM,                  /**< 连接数已满 */
    TEE_ERROR_REGISTER_EXIST_SERVICE,           /**< 注册已经存在的服务 */
    TEE_ERROR_TAGET_DEAD_FATAL,                 /**< Global Task 崩溃  */
    TEE_ERROR_READ_DATA,                        /**< 读取文件错误  */
    TEE_ERROR_WRITE_DATA,                       /**< 写入文件错误  */
    TEE_ERROR_TRUNCATE_OBJECT,                  /**< 截断文件错误  */
    TEE_ERROR_SEEK_DATA,                        /**< 查找文件错误  */
    TEE_ERROR_SYNC_DATA,                        /**< 同步文件错误  */
    TEE_ERROR_RENAME_OBJECT,                    /**< 重命名文件错误  */
    TEE_ERROR_TRUSTED_APP_LOAD_ERROR,           /**< 打开会话时，加载可信应用程序失败*/
    TEE_ERROR_GENERIC = 0xFFFF0000,             /**< 通用错误  */
    TEE_ERROR_ACCESS_DENIED = 0xFFFF0001 ,      /**< 权限校验失败  */
    TEE_ERROR_CANCEL = 0xFFFF0002 ,             /**< 操作已取消  */
    TEE_ERROR_ACCESS_CONFLICT = 0xFFFF0003 ,    /**< 并发访问导致冲突  */
    TEE_ERROR_EXCESS_DATA = 0xFFFF0004 ,        /**< 操作包含的数据太多  */
    TEE_ERROR_BAD_FORMAT = 0xFFFF0005 ,         /**< 数据格式不正确  */
    TEE_ERROR_BAD_PARAMETERS = 0xFFFF0006 ,     /**< 参数无效  */
    TEE_ERROR_BAD_STATE = 0xFFFF0007,           /**< 当前状态下的操作无效  */
    TEE_ERROR_ITEM_NOT_FOUND = 0xFFFF0008,      /**< 请求的数据未找到  */
    TEE_ERROR_NOT_IMPLEMENTED = 0xFFFF0009,     /**< 请求的操作存在但暂未实现  */
    TEE_ERROR_NOT_SUPPORTED = 0xFFFF000A,       /**< 请求的操作有效但未支持  */
    TEE_ERROR_NO_DATA = 0xFFFF000B,             /**< 数据错误  */
    TEE_ERROR_OUT_OF_MEMORY = 0xFFFF000C,       /**< 系统没有可用资源  */
    TEE_ERROR_BUSY = 0xFFFF000D,                /**< 系统繁忙  */
    TEE_ERROR_COMMUNICATION = 0xFFFF000E,       /**< 与第三方通信失败  */
    TEE_ERROR_SECURITY = 0xFFFF000F,            /**< 检测到安全错误  */
    TEE_ERROR_SHORT_BUFFER = 0xFFFF0010,        /**< 内存输入长度小于输出长度  */
    TEE_PENDING = 0xFFFF2000,                   /**< 可信服务处于等待状态(异步调用) */
    TEE_PENDING2 = 0xFFFF2001,                  /**< 可信服务处于等待状态2(命令未完成) */
    TEE_ERROR_TIMEOUT = 0xFFFF3001,             /**< 请求超时 */
    TEE_ERROR_OVERFLOW = 0xFFFF300f,            /**< 计算溢出 */
    TEE_ERROR_TARGET_DEAD = 0xFFFF3024,         /**< Trusted Application崩溃  */
    TEE_ERROR_STORAGE_NO_SPACE = 0xFFFF3041,    /**< 没有足够的Flash空间来存储文件 */
    TEE_ERROR_MAC_INVALID = 0xFFFF3071,         /**< MAC值校验错误  */
    TEE_ERROR_SIGNATURE_INVALID = 0xFFFF3072,   /**< 校验失败 */
    TEE_ERROR_TIME_NOT_SET = 0xFFFF5000,        /**< 时间未设置 */
    TEE_ERROR_TIME_NEEDS_RESET = 0xFFFF5001,    /**< 时间需要重置 */
    TEE_FAIL
};
#endif
